= content_tag_for(:tr, substrate, class: status_style(substrate.status, :table)) do
  %td.text-center
    = priority_tag substrate.priority
    = new_priority_tag substrate.priorityx
    %br/
    = best_in_place substrate, :status,
        as: :select,
        collection: Substrate::STATUSES.map { |s| [s, status_text(s, true)] },
        data: { place_success: substrate.id },
        display_with: lambda { |v| status_text(v) }
  %td.text-center{ title: substrate.otk_desc, data: { toggle: 'tooltip' }}
    - if can? :manage_otk, Substrate
      = link_to otk_status_icon(substrate.otk_status), manage_otk_substrate_path(substrate)
    - else
      = otk_status_text(substrate.otk_status)
  %td.text-nowrap{ title: substrate.desc, data: {toggle: 'tooltip'}}
    = link_to(substrate.title, substrate)
    - if substrate.desc?
      .badge.badge-pill.badge-info
        = fa_icon 'info'
    %br/
    = substrate.drawing
    - if substrate.detail?
      .text-muted= substrate.detail
  %td.text-nowrap
    .row
      .col
        = substrate_sides(substrate, :a)
      .col
        = substrate.corner
      .col
        = substrate.wave
      .col
        - features = substrate.substrate_features
        - features.select{|f| f.wave == 'A'}.each do |feature|
          %p= substrate_feature(feature)

    - if substrate.corner_b?
      .row
        .col
          = substrate_sides(substrate, :b)
        .col
          = substrate.corner_b
        .col
          = substrate.wave_b
        .col
          - features.select{|f| f.wave == 'B'}.each do |feature|
            %p= substrate_feature(feature)
  %td
    = rad_icon_name(substrate.rad_strength) ? fa_icon(rad_icon_name substrate.rad_strength) : substrate.rad_strength

  %td
    = substrate.instock
    %span.text-muted /
    = substrate.amount
  %td= substrate.ready_count
  %td
    - if substrate.shape? && substrate.diameter?
      &empty; #{substrate.diameter}
    - if substrate.width? || substrate.height?
      #{substrate.width} x #{substrate.height}
    - if substrate.thickness?
      * #{ substrate.thickness }

  %td= t("substrates.frame_#{substrate.frame}")
  %td= substrate.contract
  %td
    = substrate.arrival_from
    .text-muted= short_date substrate.arrival_at if substrate.arrival_at
  %td
    = substrate.author
    .text-muted{title: l(substrate.created_at, format: :long), data: { toggle: 'tooltip' }}
      = short_date substrate.created_at
  %td
    - followers = substrate.users.includes(:member)
    - if followers.any?
      %ul.list-unstyled.mb-0
        - followers.each do |user|
          %li= user.surname
    .text-muted
      = short_date substrate.finished_at if substrate.finished_at?
  %td
    .btn-group
      %button.btn.btn-sm.btn-outline-secondary.dropdown-toggle{ type: 'button', data: { toggle: 'dropdown' }, aria: { haspopup: 'true', expanded: 'false' } }
        = fa_icon 'cog'
      .dropdown-menu.dropdown-menu-right
        = link_to edit_substrate_path(substrate), class: 'dropdown-item' do
          = fa_icon 'edit', text: t('shared.edit')
        - if can? :manage_otk, Substrate
          = link_to manage_otk_substrate_path(substrate), class: 'dropdown-item' do
            = fa_icon 'calendar', text: t('substrates.manage_otk')
        = link_to copy_substrate_path(substrate), class: 'dropdown-item' do
          = fa_icon 'copy', text: t('shared.copy')
        = link_to substrate, method: :delete, data: { confirm: t('shared.sure') }, class: 'dropdown-item' do
          = fa_icon 'trash', text: t('shared.del')
